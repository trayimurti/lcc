"use strict";(self.webpackChunklcc=self.webpackChunklcc||[]).push([[4444],{3905:function(e,t,n){n.d(t,{Zo:function(){return u},kt:function(){return d}});var i=n(7294);function r(e,t,n){return t in e?Object.defineProperty(e,t,{value:n,enumerable:!0,configurable:!0,writable:!0}):e[t]=n,e}function o(e,t){var n=Object.keys(e);if(Object.getOwnPropertySymbols){var i=Object.getOwnPropertySymbols(e);t&&(i=i.filter((function(t){return Object.getOwnPropertyDescriptor(e,t).enumerable}))),n.push.apply(n,i)}return n}function a(e){for(var t=1;t<arguments.length;t++){var n=null!=arguments[t]?arguments[t]:{};t%2?o(Object(n),!0).forEach((function(t){r(e,t,n[t])})):Object.getOwnPropertyDescriptors?Object.defineProperties(e,Object.getOwnPropertyDescriptors(n)):o(Object(n)).forEach((function(t){Object.defineProperty(e,t,Object.getOwnPropertyDescriptor(n,t))}))}return e}function c(e,t){if(null==e)return{};var n,i,r=function(e,t){if(null==e)return{};var n,i,r={},o=Object.keys(e);for(i=0;i<o.length;i++)n=o[i],t.indexOf(n)>=0||(r[n]=e[n]);return r}(e,t);if(Object.getOwnPropertySymbols){var o=Object.getOwnPropertySymbols(e);for(i=0;i<o.length;i++)n=o[i],t.indexOf(n)>=0||Object.prototype.propertyIsEnumerable.call(e,n)&&(r[n]=e[n])}return r}var l=i.createContext({}),s=function(e){var t=i.useContext(l),n=t;return e&&(n="function"==typeof e?e(t):a(a({},t),e)),n},u=function(e){var t=s(e.components);return i.createElement(l.Provider,{value:t},e.children)},p={inlineCode:"code",wrapper:function(e){var t=e.children;return i.createElement(i.Fragment,{},t)}},m=i.forwardRef((function(e,t){var n=e.components,r=e.mdxType,o=e.originalType,l=e.parentName,u=c(e,["components","mdxType","originalType","parentName"]),m=s(n),d=r,h=m["".concat(l,".").concat(d)]||m[d]||p[d]||o;return n?i.createElement(h,a(a({ref:t},u),{},{components:n})):i.createElement(h,a({ref:t},u))}));function d(e,t){var n=arguments,r=t&&t.mdxType;if("string"==typeof e||r){var o=n.length,a=new Array(o);a[0]=m;var c={};for(var l in t)hasOwnProperty.call(t,l)&&(c[l]=t[l]);c.originalType=e,c.mdxType="string"==typeof e?e:r,a[1]=c;for(var s=2;s<o;s++)a[s]=n[s];return i.createElement.apply(null,a)}return i.createElement.apply(null,n)}m.displayName="MDXCreateElement"},2118:function(e,t,n){n.r(t),n.d(t,{frontMatter:function(){return c},contentTitle:function(){return l},metadata:function(){return s},toc:function(){return u},default:function(){return m}});var i=n(7462),r=n(3366),o=(n(7294),n(3905)),a=["components"],c={sidebar_position:2,tags:["graph","inoi","sorting","2012"]},l="Triathlon, INOI 2012",s={unversionedId:"inoi/inoi1201",id:"inoi/inoi1201",title:"Triathlon, INOI 2012",description:"Problem Description",source:"@site/code/inoi/inoi1201.md",sourceDirName:"inoi",slug:"/inoi/inoi1201",permalink:"/lcc/code/inoi/inoi1201",editUrl:"https://github.com/trayimurti/lcc/tree/main/code/inoi/inoi1201.md",tags:[{label:"graph",permalink:"/lcc/code/tags/graph"},{label:"inoi",permalink:"/lcc/code/tags/inoi"},{label:"sorting",permalink:"/lcc/code/tags/sorting"},{label:"2012",permalink:"/lcc/code/tags/2012"}],version:"current",sidebarPosition:2,frontMatter:{sidebar_position:2,tags:["graph","inoi","sorting","2012"]},sidebar:"tutorialSidebar",previous:{title:"Free ticket, INOI 2014",permalink:"/lcc/code/inoi/inoi1402"},next:{title:"Calvins Game, INOI 2013",permalink:"/lcc/code/inoi/inoi1301"}},u=[{value:"Problem Description",id:"problem-description",children:[],level:2},{value:"Prerequisites",id:"prerequisites",children:[],level:2},{value:"Solution",id:"solution",children:[],level:2},{value:"Code",id:"code",children:[],level:2}],p={toc:u};function m(e){var t=e.components,n=(0,r.Z)(e,a);return(0,o.kt)("wrapper",(0,i.Z)({},p,n,{components:t,mdxType:"MDXLayout"}),(0,o.kt)("h1",{id:"triathlon-inoi-2012"},"Triathlon, INOI 2012"),(0,o.kt)("h2",{id:"problem-description"},"Problem Description"),(0,o.kt)("p",null,"Question : ",(0,o.kt)("a",{parentName:"p",href:"https://www.codechef.com/INOIPRAC/problems/INOI1201"},"Triathlon, INOI 2012")," "),(0,o.kt)("p",null,"Submit Code : ",(0,o.kt)("a",{parentName:"p",href:"https://www.codechef.com/INOIPRAC/submit/INOI1201"},"Codechef")),(0,o.kt)("h2",{id:"prerequisites"},"Prerequisites"),(0,o.kt)("p",null,(0,o.kt)("a",{parentName:"p",href:"https://trayimurti.github.io/lcc/docs/intro"},"Sorting")),(0,o.kt)("h2",{id:"solution"},"Solution"),(0,o.kt)("p",null,"The question is very lengthy, but easy once understood. We have given time taken by each citizen in the events consisting of three (COBOL, Pole vault, and Doughnut-eating). Where COBOL being a programming event will be participated by citizen one after another (as there is only one computer). Also, a citizen has to first participate in COBOL, then Pole vault and then Doughnut-eating. So, citizen need to wait for other citizen in COBOL event but once COBOL event is completed they can participate in other two events without waiting for anyone. We have to reduce the time taken by citizen to finish all events by ordering them in a sequence. "),(0,o.kt)("p",null,"We will go as follow:"),(0,o.kt)("ol",null,(0,o.kt)("li",{parentName:"ol"},"We can merge the time taken by citizens for Pole vault and Doughnut-eating as it doesn't depend on other citizens."),(0,o.kt)("li",{parentName:"ol"},"We can observe that time taken to complete COBOL will increase as citizens participate, because other citizens have to wait till the current zitizen finish the event. So, whatever be the order in which citizen participate the COBOL programming event will take same amount of time."),(0,o.kt)("li",{parentName:"ol"},"We can see that if we order the citizens combined evets (Pole vault + Doughnut-eating) time in descending order. Then it will reduce the time took to finsh the whole event."),(0,o.kt)("li",{parentName:"ol"},"So, we will sort events time in descending in pair as (Pole vault + Doughnut-eating, COBOL) to get the answer. ")),(0,o.kt)("h2",{id:"code"},"Code"),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-cpp"},"#include<bits/stdc++.h>\n\nusing namespace std;\n\nint main(){\n    int n;\n    cin >> n;\n    vector<pair<int, int>> time;\n    int cobol, pole, doughnut;\n\n    for(int i=0;i<n;i++){\n        cin >> cobol >> pole >> doughnut;\n        time.push_back(make_pair(pole + doughnut, cobol));\n    }\n\n    sort(time.begin(), time.end(), greater<pair<int, int>>());\n    \n    int sum = 0, ans = 0;\n    for(int i=0;i<n;i++){\n        sum += time[i].second;\n        ans = max(ans, sum + time[i].first);\n    }\n    cout << ans;\n\n    return 0;\n}\n")))}m.isMDXComponent=!0}}]);