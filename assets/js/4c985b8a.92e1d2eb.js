"use strict";(self.webpackChunklcc=self.webpackChunklcc||[]).push([[5914],{3905:function(e,t,n){n.d(t,{Zo:function(){return c},kt:function(){return d}});var r=n(7294);function a(e,t,n){return t in e?Object.defineProperty(e,t,{value:n,enumerable:!0,configurable:!0,writable:!0}):e[t]=n,e}function o(e,t){var n=Object.keys(e);if(Object.getOwnPropertySymbols){var r=Object.getOwnPropertySymbols(e);t&&(r=r.filter((function(t){return Object.getOwnPropertyDescriptor(e,t).enumerable}))),n.push.apply(n,r)}return n}function i(e){for(var t=1;t<arguments.length;t++){var n=null!=arguments[t]?arguments[t]:{};t%2?o(Object(n),!0).forEach((function(t){a(e,t,n[t])})):Object.getOwnPropertyDescriptors?Object.defineProperties(e,Object.getOwnPropertyDescriptors(n)):o(Object(n)).forEach((function(t){Object.defineProperty(e,t,Object.getOwnPropertyDescriptor(n,t))}))}return e}function s(e,t){if(null==e)return{};var n,r,a=function(e,t){if(null==e)return{};var n,r,a={},o=Object.keys(e);for(r=0;r<o.length;r++)n=o[r],t.indexOf(n)>=0||(a[n]=e[n]);return a}(e,t);if(Object.getOwnPropertySymbols){var o=Object.getOwnPropertySymbols(e);for(r=0;r<o.length;r++)n=o[r],t.indexOf(n)>=0||Object.prototype.propertyIsEnumerable.call(e,n)&&(a[n]=e[n])}return a}var p=r.createContext({}),l=function(e){var t=r.useContext(p),n=t;return e&&(n="function"==typeof e?e(t):i(i({},t),e)),n},c=function(e){var t=l(e.components);return r.createElement(p.Provider,{value:t},e.children)},h={inlineCode:"code",wrapper:function(e){var t=e.children;return r.createElement(r.Fragment,{},t)}},u=r.forwardRef((function(e,t){var n=e.components,a=e.mdxType,o=e.originalType,p=e.parentName,c=s(e,["components","mdxType","originalType","parentName"]),u=l(n),d=a,g=u["".concat(p,".").concat(d)]||u[d]||h[d]||o;return n?r.createElement(g,i(i({ref:t},c),{},{components:n})):r.createElement(g,i({ref:t},c))}));function d(e,t){var n=arguments,a=t&&t.mdxType;if("string"==typeof e||a){var o=n.length,i=new Array(o);i[0]=u;var s={};for(var p in t)hasOwnProperty.call(t,p)&&(s[p]=t[p]);s.originalType=e,s.mdxType="string"==typeof e?e:a,i[1]=s;for(var l=2;l<o;l++)i[l]=n[l];return r.createElement.apply(null,i)}return r.createElement.apply(null,n)}u.displayName="MDXCreateElement"},8268:function(e,t,n){n.r(t),n.d(t,{frontMatter:function(){return s},contentTitle:function(){return p},metadata:function(){return l},toc:function(){return c},default:function(){return u}});var r=n(7462),a=n(3366),o=(n(7294),n(3905)),i=["components"],s={sidebar_position:1,tags:["graph","shortest-paths","unweighted-graph"]},p="Basics",l={unversionedId:"graph-algorithms/shortest-paths/basics",id:"graph-algorithms/shortest-paths/basics",title:"Basics",description:"Finding a shortest path between two nodes of a graph is an important problem that has many practical applications. For example, a natural problem related to a road network is to calculate the shortest possible length of a route between two cities, given the lengths of the roads.",source:"@site/docs/graph-algorithms/shortest-paths/basics.md",sourceDirName:"graph-algorithms/shortest-paths",slug:"/graph-algorithms/shortest-paths/basics",permalink:"/lcc/docs/graph-algorithms/shortest-paths/basics",editUrl:"https://github.com/trayimurti/lcc/tree/main/docs/graph-algorithms/shortest-paths/basics.md",tags:[{label:"graph",permalink:"/lcc/docs/tags/graph"},{label:"shortest-paths",permalink:"/lcc/docs/tags/shortest-paths"},{label:"unweighted-graph",permalink:"/lcc/docs/tags/unweighted-graph"}],version:"current",sidebarPosition:1,frontMatter:{sidebar_position:1,tags:["graph","shortest-paths","unweighted-graph"]},sidebar:"tutorialSidebar",previous:{title:"Applications",permalink:"/lcc/docs/graph-algorithms/graph-traversal/applications"}},c=[{value:"Unweighted Graph",id:"unweighted-graph",children:[{value:"Algorithm",id:"algorithm",children:[],level:3},{value:"Implementation",id:"implementation",children:[],level:3}],level:2}],h={toc:c};function u(e){var t=e.components,s=(0,a.Z)(e,i);return(0,o.kt)("wrapper",(0,r.Z)({},h,s,{components:t,mdxType:"MDXLayout"}),(0,o.kt)("h1",{id:"basics"},"Basics"),(0,o.kt)("p",null,"Finding a shortest path between two nodes of a graph is an important problem that has many practical applications. For example, a natural problem related to a road network is to calculate the shortest possible length of a route between two cities, given the lengths of the roads."),(0,o.kt)("h2",{id:"unweighted-graph"},"Unweighted Graph"),(0,o.kt)("h3",{id:"algorithm"},"Algorithm"),(0,o.kt)("p",null,"In an unweighted graph, the length of a path equals the number of its edges, and we can simply use breadth-first search to find a shortest path."),(0,o.kt)("h3",{id:"implementation"},"Implementation"),(0,o.kt)("table",null,(0,o.kt)("thead",{parentName:"table"},(0,o.kt)("tr",{parentName:"thead"},(0,o.kt)("th",{parentName:"tr",align:"center"},(0,o.kt)("img",{alt:"Unweighted Graph",src:n(1335).Z,width:"310",height:"159"})))),(0,o.kt)("tbody",{parentName:"table"},(0,o.kt)("tr",{parentName:"tbody"},(0,o.kt)("td",{parentName:"tr",align:"center"},(0,o.kt)("strong",{parentName:"td"},"Fig. 1:")," Unweighted Graph")))),(0,o.kt)("p",null,"Suppose, in graph (Fig. 1) we have to find shortest distance between node 1 and node 5. We will traverse the graph using BFS taking node 1 as root node and store depth of nodes (from root node 1) in ",(0,o.kt)("inlineCode",{parentName:"p"},"depth[i]"),"."),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-cpp"},"queue<int> q;\nbool visited[N];\nint distance[N];\n// x : starting node of path (root node)\nvisited[x] = true;\ndepth[x] = 0;\nq.push(x);\nwhile (!q.empty()) {\n    int s = q.front(); q.pop();\n    // process node s\n    for (auto u : adj[s]) {\n        if (visited[u]) continue;\n        visited[u] = true;\n        depth[u] = depth[s]+1;\n        q.push(u);\n    }\n}\n// y : ending node of path\ncout << depth[y] << endl;\n")))}u.isMDXComponent=!0},1335:function(e,t,n){t.Z=n.p+"assets/images/1-18916764cef9c802eb8de14483131a0c.png"}}]);