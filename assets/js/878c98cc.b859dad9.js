"use strict";(self.webpackChunklcc=self.webpackChunklcc||[]).push([[4983],{3905:function(t,e,a){a.d(e,{Zo:function(){return p},kt:function(){return h}});var n=a(7294);function r(t,e,a){return e in t?Object.defineProperty(t,e,{value:a,enumerable:!0,configurable:!0,writable:!0}):t[e]=a,t}function o(t,e){var a=Object.keys(t);if(Object.getOwnPropertySymbols){var n=Object.getOwnPropertySymbols(t);e&&(n=n.filter((function(e){return Object.getOwnPropertyDescriptor(t,e).enumerable}))),a.push.apply(a,n)}return a}function s(t){for(var e=1;e<arguments.length;e++){var a=null!=arguments[e]?arguments[e]:{};e%2?o(Object(a),!0).forEach((function(e){r(t,e,a[e])})):Object.getOwnPropertyDescriptors?Object.defineProperties(t,Object.getOwnPropertyDescriptors(a)):o(Object(a)).forEach((function(e){Object.defineProperty(t,e,Object.getOwnPropertyDescriptor(a,e))}))}return t}function i(t,e){if(null==t)return{};var a,n,r=function(t,e){if(null==t)return{};var a,n,r={},o=Object.keys(t);for(n=0;n<o.length;n++)a=o[n],e.indexOf(a)>=0||(r[a]=t[a]);return r}(t,e);if(Object.getOwnPropertySymbols){var o=Object.getOwnPropertySymbols(t);for(n=0;n<o.length;n++)a=o[n],e.indexOf(a)>=0||Object.prototype.propertyIsEnumerable.call(t,a)&&(r[a]=t[a])}return r}var l=n.createContext({}),c=function(t){var e=n.useContext(l),a=e;return t&&(a="function"==typeof t?t(e):s(s({},e),t)),a},p=function(t){var e=c(t.components);return n.createElement(l.Provider,{value:e},t.children)},d={inlineCode:"code",wrapper:function(t){var e=t.children;return n.createElement(n.Fragment,{},e)}},m=n.forwardRef((function(t,e){var a=t.components,r=t.mdxType,o=t.originalType,l=t.parentName,p=i(t,["components","mdxType","originalType","parentName"]),m=c(a),h=r,g=m["".concat(l,".").concat(h)]||m[h]||d[h]||o;return a?n.createElement(g,s(s({ref:e},p),{},{components:a})):n.createElement(g,s({ref:e},p))}));function h(t,e){var a=arguments,r=e&&e.mdxType;if("string"==typeof t||r){var o=a.length,s=new Array(o);s[0]=m;var i={};for(var l in e)hasOwnProperty.call(e,l)&&(i[l]=e[l]);i.originalType=t,i.mdxType="string"==typeof t?t:r,s[1]=i;for(var c=2;c<o;c++)s[c]=a[c];return n.createElement.apply(null,s)}return n.createElement.apply(null,a)}m.displayName="MDXCreateElement"},3407:function(t,e,a){a.r(e),a.d(e,{frontMatter:function(){return i},contentTitle:function(){return l},metadata:function(){return c},toc:function(){return p},default:function(){return m}});var n=a(7462),r=a(3366),o=(a(7294),a(3905)),s=["components"],i={sidebar_position:1,tags:["graph","dag","topological-sort"]},l="Topological Sorting",c={unversionedId:"graph-algorithms/directed-acyclic-graphs/topological-sort",id:"graph-algorithms/directed-acyclic-graphs/topological-sort",title:"Topological Sorting",description:"| A graph and topological sort |",source:"@site/docs/graph-algorithms/directed-acyclic-graphs/topological-sort.md",sourceDirName:"graph-algorithms/directed-acyclic-graphs",slug:"/graph-algorithms/directed-acyclic-graphs/topological-sort",permalink:"/lcc/docs/graph-algorithms/directed-acyclic-graphs/topological-sort",editUrl:"https://github.com/trayimurti/lcc/tree/main/docs/graph-algorithms/directed-acyclic-graphs/topological-sort.md",tags:[{label:"graph",permalink:"/lcc/docs/tags/graph"},{label:"dag",permalink:"/lcc/docs/tags/dag"},{label:"topological-sort",permalink:"/lcc/docs/tags/topological-sort"}],version:"current",sidebarPosition:1,frontMatter:{sidebar_position:1,tags:["graph","dag","topological-sort"]},sidebar:"tutorialSidebar",previous:{title:"Floyd-Warshall Algorithm",permalink:"/lcc/docs/graph-algorithms/shortest-paths/floyd-warshall"}},p=[{value:"Idea",id:"idea",children:[],level:2},{value:"Example",id:"example",children:[],level:2},{value:"Code",id:"code",children:[],level:2}],d={toc:p};function m(t){var e=t.components,i=(0,r.Z)(t,s);return(0,o.kt)("wrapper",(0,n.Z)({},d,i,{components:e,mdxType:"MDXLayout"}),(0,o.kt)("h1",{id:"topological-sorting"},"Topological Sorting"),(0,o.kt)("table",null,(0,o.kt)("thead",{parentName:"table"},(0,o.kt)("tr",{parentName:"thead"},(0,o.kt)("th",{parentName:"tr",align:"center"},(0,o.kt)("img",{alt:"A graph and topological sort",src:a(8103).Z,width:"414",height:"277"})))),(0,o.kt)("tbody",{parentName:"table"},(0,o.kt)("tr",{parentName:"tbody"},(0,o.kt)("td",{parentName:"tr",align:"center"},(0,o.kt)("strong",{parentName:"td"},"Fig. 24:")," A graph and topological sort")))),(0,o.kt)("p",null,"A topological sort is an ordering of the nodes of a directed graph such that if there is a path from node a to node b, then node a appears before node b in the ordering. For example, in Fig. 24, one possible topological sort is ","[4, 1, 5, 2, 3, 6]","."),(0,o.kt)("p",null,"A directed graph has a topological sort exactly when it is acyclic. If the graph contains a cycle, it is not possible to form a topological sort, because no node of the cycle can appear before the other nodes of the cycle in the ordering. It turns out that depth-first search can be used to both check if a directed graph contains a cycle and, if it does not, to construct a topological sort."),(0,o.kt)("h2",{id:"idea"},"Idea"),(0,o.kt)("p",null,"The idea is to go through the nodes of the graph and always begin a depth-first search at the current node if it has not been processed yet. During the searches, the nodes have three possible states:"),(0,o.kt)("ul",null,(0,o.kt)("li",{parentName:"ul"},"State 0: the node has not been processed (white)"),(0,o.kt)("li",{parentName:"ul"},"State 1: the node is under processing (light gray)"),(0,o.kt)("li",{parentName:"ul"},"State 2: the node has been processed (dark gray)")),(0,o.kt)("p",null,"Initially, the state of each node is 0. When a search reaches a node for the first time, its state becomes 1. Finally, after all edges from the node have been processed, its state becomes 2."),(0,o.kt)("p",null,"If the graph contains a cycle, we will discover this during the search, because sooner or later we will arrive at a node whose state is 1. In this case, it is not possible to construct a topological sort. If the graph does not contain a cycle, we can construct a topological sort by adding each node to a list when its state becomes 2. Finally, we reverse the list and get a topological sort for the graph."),(0,o.kt)("h2",{id:"example"},"Example"),(0,o.kt)("p",null,"Now we are ready to construct a topological sort for our example graph. The first search (Fig. 25) proceeds from node 1 to node 6, and adds nodes 6, 3, 2, and 1 to the list. Then, the second search (Fig. 26) proceeds from node 4 to node 5 and adds nodes 5 and 4 to the list. The final reversed list is ","[4, 5, 1, 2, 3, 6]",", which corresponds to a topological sort (Fig. 27). "),(0,o.kt)("div",{className:"admonition admonition-info alert alert--info"},(0,o.kt)("div",{parentName:"div",className:"admonition-heading"},(0,o.kt)("h5",{parentName:"div"},(0,o.kt)("span",{parentName:"h5",className:"admonition-icon"},(0,o.kt)("svg",{parentName:"span",xmlns:"http://www.w3.org/2000/svg",width:"14",height:"16",viewBox:"0 0 14 16"},(0,o.kt)("path",{parentName:"svg",fillRule:"evenodd",d:"M7 2.3c3.14 0 5.7 2.56 5.7 5.7s-2.56 5.7-5.7 5.7A5.71 5.71 0 0 1 1.3 8c0-3.14 2.56-5.7 5.7-5.7zM7 1C3.14 1 0 4.14 0 8s3.14 7 7 7 7-3.14 7-7-3.14-7-7-7zm1 3H6v5h2V4zm0 6H6v2h2v-2z"}))),"NOTE ")),(0,o.kt)("div",{parentName:"div",className:"admonition-content"},(0,o.kt)("p",{parentName:"div"},"Topological sort is not unique; there can be several topological sorts for a graph."))),(0,o.kt)("table",null,(0,o.kt)("thead",{parentName:"table"},(0,o.kt)("tr",{parentName:"thead"},(0,o.kt)("th",{parentName:"tr",align:"center"},(0,o.kt)("img",{alt:"The first search adds nodes 6, 3, 2, and 1 to the list",src:a(7434).Z,width:"276",height:"171"})))),(0,o.kt)("tbody",{parentName:"table"},(0,o.kt)("tr",{parentName:"tbody"},(0,o.kt)("td",{parentName:"tr",align:"center"},(0,o.kt)("strong",{parentName:"td"},"Fig. 25:")," The first search adds nodes 6, 3, 2, and 1 to the list")))),(0,o.kt)("table",null,(0,o.kt)("thead",{parentName:"table"},(0,o.kt)("tr",{parentName:"thead"},(0,o.kt)("th",{parentName:"tr",align:"center"},(0,o.kt)("img",{alt:"The second search adds nodes 5 and 4 to the list",src:a(5082).Z,width:"268",height:"166"})))),(0,o.kt)("tbody",{parentName:"table"},(0,o.kt)("tr",{parentName:"tbody"},(0,o.kt)("td",{parentName:"tr",align:"center"},(0,o.kt)("strong",{parentName:"td"},"Fig. 26:")," The second search adds nodes 5 and 4 to the list")))),(0,o.kt)("table",null,(0,o.kt)("thead",{parentName:"table"},(0,o.kt)("tr",{parentName:"thead"},(0,o.kt)("th",{parentName:"tr",align:"center"},(0,o.kt)("img",{alt:"The final topological sort",src:a(1950).Z,width:"470",height:"105"})))),(0,o.kt)("tbody",{parentName:"table"},(0,o.kt)("tr",{parentName:"tbody"},(0,o.kt)("td",{parentName:"tr",align:"center"},(0,o.kt)("strong",{parentName:"td"},"Fig. 27:")," The final topological sort")))),(0,o.kt)("p",null,"Fig. 28 shows a graph that does not have a topological sort. During the search, we reach node 2 whose state is 1, which means that the graph contains a cycle. Indeed, there is a cycle ",(0,o.kt)("span",{parentName:"p",className:"math math-inline"},(0,o.kt)("span",{parentName:"span",className:"katex"},(0,o.kt)("span",{parentName:"span",className:"katex-mathml"},(0,o.kt)("math",{parentName:"span",xmlns:"http://www.w3.org/1998/Math/MathML"},(0,o.kt)("semantics",{parentName:"math"},(0,o.kt)("mrow",{parentName:"semantics"},(0,o.kt)("mn",{parentName:"mrow"},"2"),(0,o.kt)("mo",{parentName:"mrow"},"\u2192"),(0,o.kt)("mn",{parentName:"mrow"},"3"),(0,o.kt)("mo",{parentName:"mrow"},"\u2192"),(0,o.kt)("mn",{parentName:"mrow"},"5"),(0,o.kt)("mo",{parentName:"mrow"},"\u2192"),(0,o.kt)("mn",{parentName:"mrow"},"2")),(0,o.kt)("annotation",{parentName:"semantics",encoding:"application/x-tex"},"2 \\to 3 \\to 5 \\to 2")))),(0,o.kt)("span",{parentName:"span",className:"katex-html","aria-hidden":"true"},(0,o.kt)("span",{parentName:"span",className:"base"},(0,o.kt)("span",{parentName:"span",className:"strut",style:{height:"0.6444em"}}),(0,o.kt)("span",{parentName:"span",className:"mord"},"2"),(0,o.kt)("span",{parentName:"span",className:"mspace",style:{marginRight:"0.2778em"}}),(0,o.kt)("span",{parentName:"span",className:"mrel"},"\u2192"),(0,o.kt)("span",{parentName:"span",className:"mspace",style:{marginRight:"0.2778em"}})),(0,o.kt)("span",{parentName:"span",className:"base"},(0,o.kt)("span",{parentName:"span",className:"strut",style:{height:"0.6444em"}}),(0,o.kt)("span",{parentName:"span",className:"mord"},"3"),(0,o.kt)("span",{parentName:"span",className:"mspace",style:{marginRight:"0.2778em"}}),(0,o.kt)("span",{parentName:"span",className:"mrel"},"\u2192"),(0,o.kt)("span",{parentName:"span",className:"mspace",style:{marginRight:"0.2778em"}})),(0,o.kt)("span",{parentName:"span",className:"base"},(0,o.kt)("span",{parentName:"span",className:"strut",style:{height:"0.6444em"}}),(0,o.kt)("span",{parentName:"span",className:"mord"},"5"),(0,o.kt)("span",{parentName:"span",className:"mspace",style:{marginRight:"0.2778em"}}),(0,o.kt)("span",{parentName:"span",className:"mrel"},"\u2192"),(0,o.kt)("span",{parentName:"span",className:"mspace",style:{marginRight:"0.2778em"}})),(0,o.kt)("span",{parentName:"span",className:"base"},(0,o.kt)("span",{parentName:"span",className:"strut",style:{height:"0.6444em"}}),(0,o.kt)("span",{parentName:"span",className:"mord"},"2"))))),"."),(0,o.kt)("table",null,(0,o.kt)("thead",{parentName:"table"},(0,o.kt)("tr",{parentName:"thead"},(0,o.kt)("th",{parentName:"tr",align:"center"},(0,o.kt)("img",{alt:"This graph does not have a topological sort, because it contains a cycle",src:a(5879).Z,width:"287",height:"175"})))),(0,o.kt)("tbody",{parentName:"table"},(0,o.kt)("tr",{parentName:"tbody"},(0,o.kt)("td",{parentName:"tr",align:"center"},(0,o.kt)("strong",{parentName:"td"},"Fig. 28:")," This graph does not have a topological sort, because it contains a cycle")))),(0,o.kt)("h2",{id:"code"},"Code"),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-cpp"},"void dfs(vector<int>* adj, vector<int>& visited, vector<int>& topoSort, int idx){\n    visited[idx] = true;\n    for(int u : adj[idx]){\n        if(!visited[u])\n            dfs(adj, visited, topoSort, u);\n    }\n    topoSort.push_back(idx);\n}\n\nvector<int> topologicalSort(vector<int>* adj, vector<int>& visited, int N){\n    vector<int> topoSort;\n    for(int i=1;i<=N;i++)\n        if(!visited[i])\n            dfs(adj, visited, topoSort, i);\n    reverse(topoSort.begin(), topoSort.end());\n    return topoSort;\n}\n")))}m.isMDXComponent=!0},8103:function(t,e,a){e.Z=a.p+"assets/images/24-5040a790a8c2bf92a2b4c4242fbaad41.png"},7434:function(t,e,a){e.Z=a.p+"assets/images/25-e70a28c3c5d7af22d11a89d6c987f485.png"},5082:function(t,e,a){e.Z=a.p+"assets/images/26-6f931564564f22404ad9b97a5514cba8.png"},1950:function(t,e,a){e.Z=a.p+"assets/images/27-0a51fdeb8ecac459b1563df984b33e9c.png"},5879:function(t,e,a){e.Z=a.p+"assets/images/28-f8fc9abfebdb684d3f8e31c8786b7d5b.png"}}]);