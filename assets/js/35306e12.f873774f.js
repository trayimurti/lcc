"use strict";(self.webpackChunklcc=self.webpackChunklcc||[]).push([[8217],{3151:function(a){a.exports=JSON.parse('{"name":"graph","permalink":"/lcc/docs/tags/graph","docs":[{"id":"graph-algorithms/graph-traversal/applications","title":"Applications","description":"In the applications described below we will assume that the graph is undirected.","permalink":"/lcc/docs/graph-algorithms/graph-traversal/applications"},{"id":"graph-algorithms/shortest-paths/basics","title":"Basics","description":"Finding a shortest path between two nodes of a graph is an important problem that has many practical applications. For example, a natural problem related to a road network is to calculate the shortest possible length of a route between two cities, given the lengths of the roads.","permalink":"/lcc/docs/graph-algorithms/shortest-paths/basics"},{"id":"graph-algorithms/shortest-paths/bellman-ford","title":"Bellman-Ford Algorithm","description":"The Bellman\u2013Ford algorithm finds shortest paths from a starting node to all nodes of the graph. The algorithm can process all kinds of graphs, provided that the graph does not contain a cycle with negative length. If the graph contains a negative cycle, the algorithm can detect this.","permalink":"/lcc/docs/graph-algorithms/shortest-paths/bellman-ford"},{"id":"graph-algorithms/graph-traversal/bfs","title":"Breadth-First Search (BFS)","description":"Breadth-first search (BFS) visits the nodes of a graph in increasing order of their distance from the starting node. Thus, we can calculate the distance from the starting node to all other nodes using breadth-first search. However, breadth-first search is more difficult to implement than depth-first search.","permalink":"/lcc/docs/graph-algorithms/graph-traversal/bfs"},{"id":"graph-algorithms/graph-traversal/dfs","title":"Depth-First Search (DFS)","description":"Depth-first search (DFS) is a straightforward graph traversal technique. The algorithm begins at a starting node and proceeds to all other nodes that are reachable from the starting node using the edges of the graph.","permalink":"/lcc/docs/graph-algorithms/graph-traversal/dfs"},{"id":"graph-algorithms/graph-basics/graph-representation","title":"Graph Representation","description":"There are three classical ways to represent a graph. The choice of a data structure depends on the size of the graph and the way the algorithm processes it.","permalink":"/lcc/docs/graph-algorithms/graph-basics/graph-representation"},{"id":"graph-algorithms/graph-basics/graph-terminology","title":"Graph Terminology","description":"In this course we will use variable n as number of nodes and variable m as number of edges.","permalink":"/lcc/docs/graph-algorithms/graph-basics/graph-terminology"},{"id":"graph-algorithms/what-is-a-graph","title":"Introduction to Graph","description":"What is a Graph?","permalink":"/lcc/docs/graph-algorithms/what-is-a-graph"}],"allTagsPath":"/lcc/docs/tags"}')}}]);